AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  jikanwari-api-v2
  
  Sample SAM Template for jikanwari-api-v2
Parameters:
  DomainName:
    Type: String
  CertificateArn:
    Type: String
  HostedZoneId:
    Type: String
  DynamoDBArn:
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    Tracing: Active
    Runtime: go1.x
    Architectures:
      - x86_64

Resources:
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: api-execution-role-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - Fn::Sub: ${HelloWorldFunction.Arn}
                  - Fn::Sub: ${TimeTableGetFunction.Arn}
                  - Fn::Sub: ${TimeTablePostFunction.Arn}
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: "jikanwari-api-v2-function-poclicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource: !Ref DynamoDBArn
              - Effect: "Allow"
                Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                Resource: "*"
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: "jikanwari-api-v2"
      StageName: prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger.yml
      MethodSettings:
        - LoggingLevel: ERROR
          ResourcePath: '/*'
          HttpMethod: '*'
    TracingEnabled: True
    OpenApiVersion: 2.0.0
    Domain:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateArn
      Route53:
        HostedZoneId: !Ref HostedZoneId
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/hello-world/
      Handler: functions/hello-world
  TimeTableGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/timetable-get/
      Handler: functions/timetable-get
  TimeTablePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FunctionRole.Arn
      CodeUri: functions/timetable-post/
      Handler: functions/timetable-post
